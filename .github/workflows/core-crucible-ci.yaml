name: core-crucible-ci

on:
  workflow_call:
    inputs:
      ci_target:
        required: true
        type: string
      ci_target_dir:
        required: false
        type: string
        default: ""
      crucible_ci_test:
        required: false
        type: string
        default: "no"
      ci_target_branch:
        required: true
        type: string
      crucible_ci_test_branch:
        required: false
        type: string
      github_workspace:
        required: true
        type: string
      userenv_filter:
        required: false
        type: string
        default: "all"
      release:
        required: false
        type: string
        default: "upstream"
      ci_built_controller:
        required: false
        type: string
        default: "no"
      ci_built_controller_tag:
        required: false
        type: string
        default: "--"
    secrets:
      registry_auth:
        required: false
      ci_registry_auth:
        required: false
      production_registry_auth:
        required: false
      quay_oauth_token:
        required: false

concurrency:
  group: ${{ inputs.crucible_ci_test }}/${{ inputs.ci_target }}/${{ github.ref }}/core-crucible-ci/${{ inputs.release }}
  cancel-in-progress: true

env:
  GITHUB_WORKSPACE: ${{ inputs.github_workspace }}

jobs:
  gen-params:
    runs-on: [ self-hosted, workflow-overhead ]
    timeout-minutes: 10
    outputs:
      userenvs: ${{ steps.get-userenvs.outputs.userenvs }}
      github_hosted_scenarios: ${{ steps.get-scenarios-github.outputs.scenarios }}
      self_hosted_scenarios: ${{ steps.get-scenarios-self.outputs.scenarios }}
      timeout_minutes: ${{ steps.determine-timeout-minutes.outputs.timeout-minutes }}
    steps:

    - name: checkout crucible default
      if: ${{ inputs.ci_target != 'crucible' && inputs.release == 'upstream' }}
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/crucible
        ref: master
        path: crucible
    - name: checkout crucible ci_target
      if: ${{ inputs.ci_target == 'crucible' && inputs.release == 'upstream' }}
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/${{ inputs.ci_target }}
        ref: ${{ inputs.ci_target_branch }}
        path: crucible
        fetch-depth: 2
    - name: checkout crucible release
      if: ${{ inputs.release != 'upstream' }}
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/crucible
        ref: ${{ inputs.release }}
        path: crucible

    - name: checkout workshop default
      if: ${{ inputs.ci_target != 'workshop' && inputs.release == 'upstream' }}
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/workshop
        ref: master
        path: workshop
    - name: checkout workshop ci_target
      if: ${{ inputs.ci_target == 'workshop' && inputs.release == 'upstream' }}
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/${{ inputs.ci_target }}
        ref: ${{ inputs.ci_target_branch }}
        path: workshop
        fetch-depth: 2
    - name: checkout workshop release
      if: ${{ inputs.release != 'upstream' }}
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/workshop
        ref: ${{ inputs.release }}
        path: workshop

    - name: checkout crucible-ci default
      if: ${{ inputs.ci_target != 'crucible-ci' && inputs.crucible_ci_test != 'yes' }}
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/crucible-ci
        ref: main
        path: crucible-ci
    - name: checkout crucible-ci ci_target
      if: ${{ inputs.ci_target == 'crucible-ci' && inputs.crucible_ci_test != 'yes' }}
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/${{ inputs.ci_target }}
        ref: ${{ inputs.ci_target_branch }}
        path: crucible-ci
    - name: checkout crucible-ci crucible_ci_test
      if: ${{ inputs.crucible_ci_test == 'yes' }}
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/crucible-ci
        ref: ${{ inputs.crucible_ci_test_branch }}
        path: crucible-ci

    - name: checkout rickshaw default
      if: ${{ inputs.ci_target != 'rickshaw' && inputs.release == 'upstream' }}
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/rickshaw
        ref: master
        path: rickshaw
    - name: checkout rickshaw ci_target
      if: ${{ inputs.ci_target == 'rickshaw' && inputs.release == 'upstream' }}
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/${{ inputs.ci_target }}
        ref: ${{ inputs.ci_target_branch }}
        path: rickshaw
    - name: checkout rickshaw release
      if: ${{ inputs.release != 'upstream' }}
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/rickshaw
        ref: ${{ inputs.release }}
        path: rickshaw

    - name: run get-userenvs
      id: get-userenvs
      uses: ./crucible-ci/.github/actions/get-userenvs
      with:
        rickshaw-directory: "./rickshaw"
        userenv-filter: ${{ inputs.userenv_filter }}
    - name: run get-scenarios-github
      id: get-scenarios-github
      uses: ./crucible-ci/.github/actions/get-scenarios
      with:
        runner-type: "github"
    - name: run get-scenarios-self
      id: get-scenarios-self
      uses: ./crucible-ci/.github/actions/get-scenarios
      with:
        runner-type: "self"
        runner-tags: "cpu-partitioning,remotehosts"

    - name: determine timeout-minutes
      id: determine-timeout-minutes
      run: |
        if [ "${{ inputs.ci_built_controller }}" == "yes" ]; then
          build_controller_timeout_minutes=150
          echo "Setting timeout-minutes to the build controller value of '${build_controller_timeout_minutes}'"
          echo "timeout-minutes=${build_controller_timeout_minutes}" >> $GITHUB_OUTPUT
        else
          no_build_controller_timeout_minutes=90
          echo "Setting timeout-minutes to the no build controller value of '${no_build_controller_timeout_minutes}'"
          echo "timeout-minutes=${no_build_controller_timeout_minutes}" >> $GITHUB_OUTPUT
        fi

  display-params:
    runs-on: [ self-hosted, workflow-overhead ]
    timeout-minutes: 10
    needs: gen-params
    steps:
    - name: Echo gen-params outputs
      run: echo "${{ toJSON(needs.gen-params.outputs) }}"

  github-runners:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(needs.gen-params.outputs.timeout_minutes) }}
    needs:
    - gen-params
    - display-params
    strategy:
      fail-fast: false
      matrix:
        scenario: ${{ fromJSON(needs.gen-params.outputs.github_hosted_scenarios) }}
        userenv: ${{ fromJSON(needs.gen-params.outputs.userenvs) }}
    steps:
    - name: Matrix Parameters => (${{ matrix.scenario.enabled }}, ${{ matrix.scenario.endpoint }}, ${{ matrix.scenario.benchmark }}, ${{ matrix.userenv }})
      run: |
        echo "enabled=${{ matrix.scenario.enabled }}"
        echo "endpoint=${{ matrix.scenario.endpoint }}"
        echo "benchmark=${{ matrix.scenario.benchmark }}"
        echo "userenv=${{ matrix.userenv }}"

    - name: checkout ${{ inputs.ci_target_dir }} ci_target
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/${{ inputs.ci_target_dir }}
        ref: ${{ inputs.ci_target_branch }}
        path: ${{ inputs.ci_target_dir }}

    - name: checkout crucible-ci default
      if: ${{ inputs.ci_target != 'crucible-ci' && inputs.crucible_ci_test != 'yes' }}
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/crucible-ci
        ref: main
        path: crucible-ci
    - name: checkout crucible-ci crucible_ci_test
      if: ${{ inputs.ci_target != 'crucible-ci' && inputs.crucible_ci_test == 'yes' }}
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/crucible-ci
        ref: ${{ inputs.crucible_ci_test_branch }}
        path: crucible-ci

    - name: import ci secret
      env:
        ENGINE_REGISTRY_AUTH_SECRET: ${{ secrets.registry_auth != '' && secrets.registry_auth || secrets.ci_registry_auth }}
      if: ${{ env.ENGINE_REGISTRY_AUTH_SECRET != '' }}
      run: sudo bash -c "echo \"$ENGINE_REGISTRY_AUTH_SECRET\" > /root/crucible-ci-engines-token.json"
    - name: import production secret
      env:
        ENGINE_REGISTRY_AUTH_SECRET: ${{ secrets.production_registry_auth }}
      if: ${{ env.ENGINE_REGISTRY_AUTH_SECRET != '' }}
      run: sudo bash -c "echo \"$ENGINE_REGISTRY_AUTH_SECRET\" > /root/crucible-production-engines-token.json"

    - name: import quay oath token
      env:
        QUAY_OAUTH_TOKEN: ${{ secrets.quay_oauth_token }}
      if: ${{ env.QUAY_OAUTH_TOKEN != '' }}
      run: sudo bash -c "echo \"$QUAY_OAUTH_TOKEN\" > /root/quay-oauth.token"

    - name: run crucible-ci->integration-tests
      if: ${{ matrix.scenario.enabled }}
      uses: ./crucible-ci/.github/actions/integration-tests
      with:
        artifact_tag: "${{ inputs.ci_target }}__github-runners__${{ matrix.scenario.endpoint }}-${{ matrix.scenario.benchmark }}-${{ matrix.userenv }}-${{ inputs.release }}"
        ci_endpoint: "${{ matrix.scenario.endpoint }}"
        scenarios: "${{ matrix.scenario.benchmark }}"
        userenvs: "${{ matrix.userenv }}"
        ci_target: "${{ inputs.ci_target }}"
        ci_target_dir: ${{ github.workspace }}/${{ inputs.ci_target_dir }}
        ci_controller: ${{ inputs.ci_built_controller }}
        controller_tag: ${{ inputs.ci_built_controller_tag }}
        crucible_release: "${{ inputs.release }}"
    - name: skip crucible-ci->integration-tests
      if: ${{ ! matrix.scenario.enabled }}
      run: echo "crucible-ci->integration-tests not enabled"

  self-hosted-runners:
    runs-on: [ self-hosted, cpu-partitioning, remotehosts ]
    timeout-minutes: ${{ fromJSON(needs.gen-params.outputs.timeout_minutes) }}
    needs:
    - gen-params
    - display-params
    strategy:
      fail-fast: false
      matrix:
        scenario: ${{ fromJSON(needs.gen-params.outputs.self_hosted_scenarios) }}
        userenv: ${{ fromJSON(needs.gen-params.outputs.userenvs) }}
    steps:
    - name: Matrix Parameters => (${{ matrix.scenario.enabled }}, ${{ matrix.scenario.endpoint }}, ${{ matrix.scenario.benchmark }}, ${{ matrix.userenv }})
      run: |
        echo "enabled=${{ matrix.scenario.enabled }}"
        echo "endpoint=${{ matrix.scenario.endpoint }}"
        echo "benchmark=${{ matrix.scenario.benchmark }}"
        echo "userenv=${{ matrix.userenv }}"

    - name: checkout ${{ inputs.ci_target_dir }} ci_target
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/${{ inputs.ci_target_dir }}
        ref: ${{ inputs.ci_target_branch }}
        path: ${{ inputs.ci_target_dir }}

    - name: checkout crucible-ci default
      if: ${{ inputs.ci_target != 'crucible-ci' && inputs.crucible_ci_test != 'yes' }}
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/crucible-ci
        ref: main
        path: crucible-ci
    - name: checkout crucible-ci crucible_ci_test
      if: ${{ inputs.ci_target != 'crucible-ci' && inputs.crucible_ci_test == 'yes' }}
      uses: actions/checkout@v4
      with:
        repository: perftool-incubator/crucible-ci
        ref: ${{ inputs.crucible_ci_test_branch }}
        path: crucible-ci

    - name: import ci secret
      env:
        ENGINE_REGISTRY_AUTH_SECRET: ${{ secrets.registry_auth != '' && secrets.registry_auth || secrets.ci_registry_auth }}
      if: ${{ env.ENGINE_REGISTRY_AUTH_SECRET != '' }}
      run: sudo bash -c "echo \"$ENGINE_REGISTRY_AUTH_SECRET\" > /root/crucible-ci-engines-token.json"
    - name: import production secret
      env:
        ENGINE_REGISTRY_AUTH_SECRET: ${{ secrets.production_registry_auth }}
      if: ${{ env.ENGINE_REGISTRY_AUTH_SECRET != '' }}
      run: sudo bash -c "echo \"$ENGINE_REGISTRY_AUTH_SECRET\" > /root/crucible-production-engines-token.json"

    - name: import quay oath token
      env:
        QUAY_OAUTH_TOKEN: ${{ secrets.quay_oauth_token }}
      if: ${{ env.QUAY_OAUTH_TOKEN != '' }}
      run: sudo bash -c "echo \"$QUAY_OAUTH_TOKEN\" > /root/quay-oauth.token"

    - name: run crucible-ci->integration-tests
      if: ${{ matrix.scenario.enabled }}
      uses: ./crucible-ci/.github/actions/integration-tests
      with:
        artifact_tag: "${{ inputs.ci_target }}__self-hosted-runners__${{ matrix.scenario.endpoint }}-${{ matrix.scenario.benchmark }}-${{ matrix.userenv }}-${{ inputs.release }}"
        ci_endpoint: "${{ matrix.scenario.endpoint }}"
        scenarios: "${{ matrix.scenario.benchmark }}"
        userenvs: "${{ matrix.userenv }}"
        ci_target: "${{ inputs.ci_target }}"
        ci_target_dir: ${{ github.workspace }}/${{ inputs.ci_target_dir }}
        ci_controller: ${{ inputs.ci_built_controller }}
        controller_tag: ${{ inputs.ci_built_controller_tag }}
        crucible_release: "${{ inputs.release }}"
    - name: skip crucible-ci->integration-tests
      if: ${{ ! matrix.scenario.enabled }}
      run: echo "crucible-ci->integration-tests not enabled"

  core-crucible-ci-complete:
    runs-on: [ self-hosted, workflow-overhead ]
    timeout-minutes: 10
    needs:
    - github-runners
    - self-hosted-runners
    steps:
    - name: Confirm Success
      run: echo "core-crucible-ci-complete"
