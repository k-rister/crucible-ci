#!/usr/bin/env bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

SCRIPT_DIR=$(dirname $0)
SCRIPT_DIR=$(readlink -e ${SCRIPT_DIR})

. ${SCRIPT_DIR}/base

CI_RUN_ENVIRONMENT="standalone"

longopts="run-environment:"
opts=$(getopt -q -o "" --longoptions "${longopts}" -n "$0" -- "$@")
if [ ${?} -ne 0 ]; then
    echo "ERROR: Unrecognized option specified: $@"
    exit 1
fi
eval set -- "${opts}"
while true; do
    case "${1}" in
        --run-environment)
            shift
            CI_RUN_ENVIRONMENT="${1}"
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "ERROR: Unexpected argument [${1}]"
            shift
            break
            ;;
    esac
done

# validate inputs
validate_ci_run_environment

header="Checking for toolbox logged die"
start_github_group "${header}"
echo -e "*** ${header} ***\n"

toolbox_logged_die_filename="/tmp/toolbox_logged_die.txt"

if [ -e "${toolbox_logged_die_filename}" ]; then
    echo "WARNING: Found ${toolbox_logged_die_filename}:"
    cat ${toolbox_logged_die_filename}

    rm -v ${toolbox_logged_die_filename}
fi

stop_github_group

header="Determine stage 1 exit status"
start_github_group "${header}"
echo -e "*** ${header} ***\n"

stage1_exit_status_file="/tmp/run-ci-stage1-exit-status"
if [ -e "${stage1_exit_status_file}" ]; then
    read stage1_exit_status < ${stage1_exit_status_file}
    rm ${stage1_exit_status_file}

    if [ -z "${stage1_exit_status}" ]; then
        echo "ERROR: Read an empty stage 1 exit status from ${stage1_exit_status_file}"
    else
        echo "Read stage 1 exit status as ${stage1_exit_status} from ${stage1_exit_status_file}"
        exit ${stage1_exit_status}
    fi
else
    echo "ERROR: Could not find stage 1 exit status because ${stage1_exit_status_file} does not exist"
fi

exit 1

stop_github_group
